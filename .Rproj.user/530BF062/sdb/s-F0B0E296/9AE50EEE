{
    "collab_server" : "",
    "contents" : "\n\n# Import package ----------------------------------------------------------\nlibrary(isa2)\n\n# Import Data -------------------------------------------------------------\n\n## serum data\nserum <- read.csv(\"C://Mimi/Stage_CBG/2.EXPRESSION_MODULE/Data/metabolomics/serum.nmr.focus.all.colaus1.20160830.csv\", h = F)\nppm <- paste(\"ppm\", serum[1,2:ncol(serum)], sep =\"_\")\ntp  <- paste(\"id\", serum[2:nrow(serum),1], sep = \"_\")\nserum <- serum[2:nrow(serum), 2:ncol(serum)]\ncolnames(serum) <- ppm\nrownames(serum) <- tp\n\n## urine data\nurine <- read.csv(\"C://Mimi/Stage_CBG/2.EXPRESSION_MODULE/Data/metabolomics/urine.nmr.focus.all.colaus1.20161205.csv\", h = F)\nppm <- paste(\"ppm\", urine[1,2:ncol(urine)], sep =\"_\")\ntp  <- paste(\"id\", urine[2:nrow(urine),1], sep = \"_\")\nurine <- urine[2:nrow(urine), 2:ncol(urine)]\ncolnames(urine) <- ppm\nrownames(urine) <- tp\n\nrm(\"ppm\", \"tp\")\n## select matching id (790 individuals having serum and urine metabolomics)\nserum <- serum[rownames(serum) %in% rownames(urine),]\nserum <- serum[order(rownames(serum)),]\nurine <- urine[rownames(urine) %in% rownames(serum),]\nurine <- urine[order(rownames(urine)),]\n\n## Data Normalization\n# serum\nserum[serum<1]=1 # to avoid negative numbers\nserum <- log10(serum)# log-transformed data\nserum <- serum-(rep(rowMeans(serum), each = ncol(serum))/rep(apply(serum, 1, sd, na.rm = TRUE), each = ncol(serum))) #Normalize subjects\nserum <- serum-(rep(colMeans(serum), each = ncol(serum))/rep(apply(serum, 2, sd, na.rm = TRUE), each = ncol(serum))) #Normalize variables\n#urine\nurine[urine<1]=1 # to avoid negative numbers\nurine <- log10(urine)# log-transformed data\nurine <- urine-(rep(rowMeans(urine), each = ncol(urine))/rep(apply(urine, 1, sd, na.rm = TRUE), each = ncol(urine))) #Normalize subjects\nurine <- urine-(rep(colMeans(urine), each = ncol(urine))/rep(apply(urine, 2, sd, na.rm = TRUE), each = ncol(urine))) #Normalize variables\n\n# isa run ---------------------------------------------------------\n\n## serum\nserum.isa <- isa(as.matrix(serum), thr.row = seq(2, 3.5, by = 0.1), thr.col = seq(2, 3.5, by = 0.1))\n\n## urine\nurine.isa <- isa(as.matrix(urine), thr.row = seq(2, 3.5, by = 0.1), thr.col = seq(2, 3.5, by = 0.1))\n\n## urine and serum combination\nuri.ser <- cbind(urine, serum)\nuri.ser.isa <- isa(as.matrix(uri.ser))\n\n## module info\nserum.modules <- isaModules(serum.isa, type = \"isa\")\nurine.modules <- isaModules(urine.isa, type = \"isa\")\nhist(serum.modules$colGroups, col = \"red\", main = \"Peaks by modules\", xlab = \"serum\")\nhist(serum.modules$rowGroups, col = \"orange\", main = \"Individuals by modules\", xlab = \"serum\")\nhist(urine.modules$colGroups, col = \"blue\", main = \"Peaks by modules\", xlab = \"urine\")\nhist(urine.modules$rowGroups, col = \"yellow\", main = \"Individuals by modules\", xlab = \"urine\")\n\n\n## look for similarity of modules between urine and serum\nidentity <- matrix(NA, nrow = nrow(urine.modules), ncol = nrow(serum.modules))\nfor(i in 1:nrow(urine.modules)){\n  id.u <- isaRowNames(data = urine, type = \"isa\", data.isa = urine.isa, n = i)\n  for(j in 1:nrow(serum.modules)){\n    id.s <- isaRowNames(data = serum, type = \"isa\", data.isa = serum.isa, n = j)\n    perc <- round(ifelse(length(id.u) > length(id.s), sum(id.u %in% id.s)/length(id.u), sum(id.s %in% id.u)/length(id.s)), 2)\n    identity[i,j] <- perc\n  }\n}\nrownames(identity) <- paste0(\"mod.u\", seq(1,nrow(urine.modules)))\ncolnames(identity) <- paste0(\"mod.s\", seq(1,nrow(serum.modules)))\n\nidentity.sel <- identity[apply(identity, MARGIN = 1, function(x) any(x >= 0.8)), ]\nidentity.sel <- identity[apply(identity, MARGIN = 2, function(x) any(x >= 0.8)), ]\n\nmy_palette <- colorRampPalette(c(\"red\", \"yellow\", \"green\"))(n = 299)\ncol_breaks = c(seq(0,0.39,length=100),               # for red\n               seq(0.4,0.79,length=100),           # for yellow\n               seq(0.8,1,length=100))             # for green\n\nheatmap.2(identity, \n          cellnote = identity,\n          notecex= 0.7,\n          main = \"Matching individuals in serum and urine modules\",\n          notecol=\"black\",\n          density.info=\"none\",\n          trace=\"none\",       \n          col=my_palette,\n          dendrogram = \"none\",\n          Colv=\"NA\",\n          Rowv = \"NA\",\n          keysize = 0.5,\n          key.title = \"Identity\",\n          key.xlab = NA,\n          breaks = col_breaks)\n\n## plot modules (example of two modules with same individuals)\npar(mfrow = c(1,2))\nisa2image(data = serum, type = \"isa\", data.isa = serum.isa, n = 8)\nisa2image(data = urine, type = \"isa\", data.isa = urine.isa, n = 9)\nisa2image(data = serum, type = \"isa\", data.isa = serum.isa, n = 4)\nisa2image(data = urine, type = \"isa\", data.isa = urine.isa, n = 6)\n\n# PPA ---------------------------------------------------------------------\nser_ur <- list(as.matrix(t(serum)), as.matrix(t(urine)))\nmetabo.ppa <- ppa(ser_ur)\nmetabo.ppa2 <- ppa(ser_ur, thr.row1 = seq(1,6, by = 0.5), thr.row2 = seq(1,6, by = 0.5), thr.col = seq(0,3, by = 0.5))\n\nmetabo.module.info <- isaModules(data = metabo.ppa, type = \"ppa\")\nmetabo.module.info2 <- isaModules(data = metabo.ppa2, type = \"ppa\")\nhist(metabo.module.info$colGroups)\nhist(metabo.module.info2$colGroups)\nhist(metabo.module.info$row1Groups)\n\n## ppa plot\n\nisa2image(data = serum, data2 = urine, type = \"ppa\", data.isa = metabo.ppa,\n          n = 29, name1 = \"serum\", name2 = \"urine\")\n\nisa2image(data = serum, data2 = urine, type = \"ppa\", data.isa = metabo.ppa2,\n          n = 44, name1 = \"serum\", name2 = \"urine\")\n\n\n# scratch -----------------------------------------------------------------\n\n\n\n",
    "created" : 1490874232933.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1155480941",
    "id" : "9AE50EEE",
    "lastKnownWriteTime" : 1490872898,
    "last_content_update" : 1490872898,
    "path" : "C:/Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/script/metabo_isa.R",
    "project_path" : "script/metabo_isa.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}