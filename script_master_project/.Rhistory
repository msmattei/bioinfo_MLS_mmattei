dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/tranf",
trait, "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(phen[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(phen[,trait], col = 2)
text(-2, max(phen[,trait], na.rm = T)-10, paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
## transformed data:
for(trait in covariables[c(1,2,6)]){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/transf",
trait, Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(pheno_transf[,trait])), main = paste0("Transformed ", trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(pheno_transf[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(pheno_transf[,trait], col = 2)
text(-2, max(pheno_transf[,trait], na.rm = T)-10, paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
covariables <- c("GLUC", "TRIG", "HDLCH", "CHOL", "LDLCH", "SBP")
for(trait in covariables){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(phen[,trait])), main = paste0(trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(phen[,trait], main = paste0(trait, " Normal Q-Q Plot"))
qqline(phen[,trait], col = 2)
text(-2, max(phen[,trait], na.rm = T)-10, paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
## transformed data:
for(trait in covariables[c(1,2,6)]){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/transf",
trait, Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(pheno_transf[,trait])), main = paste0("Transformed ", trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(pheno_transf[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(pheno_transf[,trait], col = 2)
text(-2, max(pheno_transf[,trait], na.rm = T)-10, paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
for(trait in covariables){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(phen[,trait])), main = paste0(trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(phen[,trait], main = paste0(trait, " Normal Q-Q Plot"))
qqline(phen[,trait], col = 2)
text(-2, max(phen[,trait], na.rm = T)-10, paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
## transformed data:
for(trait in covariables[c(1,2,6)]){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(pheno_transf[,trait])), main = paste0("Transformed ", trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(pheno_transf[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(pheno_transf[,trait], col = 2)
text(-2, max(pheno_transf[,trait], na.rm = T)-10, paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
trai="GLUC"
traiT="GLUC"
rm(trai)
rm(traiT)
trait="GLUC"
qqnorm(pheno_transf[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(pheno_transf[,trait], col = 2)
text(-2, max(pheno_transf[,trait], na.rm = T)-10, paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
max(pheno_transf[,trait]
max(pheno_transf[,trait], na.rm = T)-10
(max(pheno_transf[,trait], na.rm = T)/10)
for(trait in covariables){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(phen[,trait])), main = paste0(trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(phen[,trait], main = paste0(trait, " Normal Q-Q Plot"))
qqline(phen[,trait], col = 2)
text(-2, max(phen[,trait], na.rm = T)-(max(pheno_transf[,trait], na.rm = T)/10),
paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
## transformed data:
for(trait in covariables[c(1,2,6)]){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(pheno_transf[,trait])), main = paste0("Transformed ", trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(pheno_transf[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(pheno_transf[,trait], col = 2)
text(-2, max(pheno_transf[,trait], na.rm = T)-(max(pheno_transf[,trait], na.rm = T)/10),
paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(phen[,trait])$p))
dev.off()
}
## transformed data:
for(trait in covariables[c(1,2,6)]){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(pheno_transf[,trait])), main = paste0("Transformed ", trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(pheno_transf[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(pheno_transf[,trait], col = 2)
text(-2, max(pheno_transf[,trait], na.rm = T)-(max(pheno_transf[,trait], na.rm = T)/10),
paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(pheno_transf[,trait])$p))
dev.off()
}
shapiro.test(pheno_transf[,trait])
pheno_transf[,trait]
trait
shapiro.test(phen[,trait])
phen[,trait]
dim(phen)
dim(pheno)
for(trait in covariables[c(1,2,6)]){
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
plot(density(na.omit(pheno_transf[,trait])), main = paste0("Transformed ", trait, " Density Plot"))
dev.off()
png(paste0("C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/figure/normality_test/",
trait, "tranf_", "qqplot", Sys.Date(), ".png"), width = 23, height = 20, units = 'cm', res = 300)
qqnorm(pheno_transf[,trait], main = paste0("Transformed ", trait, " Normal Q-Q Plot"))
qqline(pheno_transf[,trait], col = 2)
text(-2, max(pheno_transf[,trait], na.rm = T)-(max(pheno_transf[,trait], na.rm = T)/10),
paste0("Shapiro-Wilk normality test \n p = ", shapiro.test(pheno_transf[,trait][1:5000])$p))
dev.off()
}
phen <- pheno_transf[pheno_transf$ID %in% rownames(urine),]
covariables <- c("GLUC", "TRIG", "HDLCH", "CHOL", "LDLCH", "SBP")
linear_regression_result <- matrix(NA, ncol(urine.uni$rows), 6)
for(j in 1:length(covariables)){
for (i in 1:ncol(urine.uni$rows)){
p <- summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
linear_regression_result[i,j] <- round(p,2)
}
}
colnames(linear_regression_result) <- covariables
rownames(linear_regression_result) <- paste0("Module", 1:ncol(urine.uni$rows))
heatmap.2(linear_regression_result, cellnote = linear_regression_result, notecex= 0.7, margins = c(7,7),
main = "Linear regression result", cexRow = 0.8, cexCol = 1.2, xlab = "", ylab = "",
notecol="black", density.info="none", trace="none", dendrogram = "none",
col = colorRampPalette(c("red", "green"))(n = 199), breaks = c(seq(0,0.05,length=100),             # for red
seq(0.3,1,length=100)), Colv="NA", Rowv = "NA",
keysize = 0.7, key.title = "p-value", key.xlab = NA)
str(phen)
str(pheno)
linear_regression_result
linear_regression_result <- matrix(NA, ncol(urine.uni$rows), 6)
for(j in 1:length(covariables)){
for (i in 1:ncol(urine.uni$rows)){
p <- summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
linear_regression_result[i,j] <- round(p,2)
}
}
p <- summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
phen[,covariables[j]]
urine.uni$rows[,i]
SEX
dim(phen)
phen <- unique(phen)
covariables <- c("GLUC", "TRIG", "HDLCH", "CHOL", "LDLCH", "SBP")
linear_regression_result <- matrix(NA, ncol(urine.uni$rows), 6)
for(j in 1:length(covariables)){
for (i in 1:ncol(urine.uni$rows)){
p <- summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
linear_regression_result[i,j] <- round(p,2)
}
}
colnames(linear_regression_result) <- covariables
rownames(linear_regression_result) <- paste0("Module", 1:ncol(urine.uni$rows))
heatmap.2(linear_regression_result, cellnote = linear_regression_result, notecex= 0.7, margins = c(7,7),
main = "Linear regression result", cexRow = 0.8, cexCol = 1.2, xlab = "", ylab = "",
notecol="black", density.info="none", trace="none", dendrogram = "none",
col = colorRampPalette(c("red", "green"))(n = 199), breaks = c(seq(0,0.05,length=100),             # for red
seq(0.3,1,length=100)), Colv="NA", Rowv = "NA",
keysize = 0.7, key.title = "p-value", key.xlab = NA)
urine.modules.uni
urine.modules.uni[order(urine.modules.uni$rowGroups, decreasing = T)]
order(urine.modules.uni$rowGroups, decreasing = T)
urine.modules.uni[order(urine.modules.uni$rowGroups, decreasing = T),]
urine.modules.uni$rowGroups > 20
linear_regression_result
linear_regression_result <- linear_regression_result[order(urine.modules.uni$rowGroups, decreasing = T),]
linear_regression_result
heatmap.2(linear_regression_result, cellnote = linear_regression_result, notecex= 0.7, margins = c(7,7),
main = "Linear regression result", cexRow = 0.8, cexCol = 1.2, xlab = "", ylab = "",
notecol="black", density.info="none", trace="none", dendrogram = "none",
col = colorRampPalette(c("red", "green"))(n = 199), breaks = c(seq(0,0.05,length=100),             # for red
seq(0.3,1,length=100)), Colv="NA", Rowv = "NA",
keysize = 0.7, key.title = "p-value", key.xlab = NA)
linear_regression_result <- matrix(NA, ncol(serum.uni$rows), 6)
for(j in 1:length(covariables)){
for (i in 1:ncol(serum.uni$rows)){
p <- summary(lm(phen[,covariables[j]] ~ serum.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
linear_regression_result[i,j] <- round(p,2)
}
}
colnames(linear_regression_result) <- covariables
rownames(linear_regression_result) <- paste0("Module", 1:ncol(urine.uni$rows))
rownames(linear_regression_result) <- paste0("Module", 1:ncol(serum.uni$rows))
linear_regression_result <- linear_regression_result[order(serum.modules.uni$rowGroups, decreasing = T),]
heatmap.2(linear_regression_result, cellnote = linear_regression_result, notecex= 0.7, margins = c(7,7),
main = "Linear regression result", cexRow = 0.8, cexCol = 1.2, xlab = "", ylab = "",
notecol="black", density.info="none", trace="none", dendrogram = "none",
col = colorRampPalette(c("red", "green"))(n = 199), breaks = c(seq(0,0.05,length=100),             # for red
seq(0.3,1,length=100)), Colv="NA", Rowv = "NA",
keysize = 0.7, key.title = "p-value", key.xlab = NA)
serum.modules.uni[order(serum.modules.uni$rowGroups, decreasing = T),]]
serum.modules.uni[order(serum.modules.uni$rowGroups, decreasing = T),]
isa()
isa
isa
isa()
head(urine.uni$rows)
head(urine.uni$seeddata)
## useful isa functions
# Modules informations -----------------------------------------------------
isaModules <- function(data.isa, type = c("isa", "ppa")) {
if(type == "isa"){
colGroups <- matrix(NA, ncol(data.isa$rows))
rowGroups <- matrix(NA, ncol(data.isa$rows))
for (i in 1:ncol(data.isa$rows)) {
colGroups[i] <- sum(data.isa$columns[,i] != 0)
rowGroups[i] <- sum(data.isa$rows[,i] != 0)
}
modules <- data.frame(colGroups, rowGroups, rob = data.isa$seeddata$rob,
thr.row = data.isa$seeddata$thr.row, thr.col = data.isa$seeddata$thr.col)
colnames(modules) <- c("colGroups", "rowGroups", "rob", "thr.row", "thr.col")
rownames(modules) <- paste0("Module", 1:nrow(modules))
}
if(type == "ppa"){
colGroups <- matrix(NA, ncol(data.isa$rows1))
row1Groups <- matrix(NA, ncol(data.isa$rows1))
row2Groups <- matrix(NA, ncol(data.isa$rows2))
for (i in 1:ncol(data.isa$rows1)) {
colGroups[i] <- sum(data.isa$columns[,i] != 0)
row1Groups[i] <- sum(data.isa$rows1[,i] != 0)
row2Groups[i] <- sum(data.isa$rows2[,i] != 0)
}
modules <- data.frame(colGroups, row1Groups, row2Groups, rob = data.isa$seeddata$rob,
thr.row1 = data.isa$seeddata$thr.row1,
thr.row2 = data.isa$seeddata$thr.row2, thr.col = data.isa$seeddata$thr.col)
colnames(modules) <- c("colGroups", "row1Groups","row2Groups", "rob", "thr.row1", "thr.row2", "thr.col")
rownames(modules) <- paste0("Module", 1:nrow(modules))
}
print(modules)
}
# Extract module informations ----------------------------------------------------
isaRowNames <- function(data, data2 = NULL, data.isa, type = "isa", n){
if(type == "isa"){
isaRow = data.isa$rows[, n] != 0
isaCol = data.isa$columns[, n] != 0
module.n <- as.matrix(data[isaRow, isaCol, drop=FALSE])
return(rownames(module.n))
}
if(type == "ppa"){
isaRow1 = data.isa$rows1[, n] != 0
isaRow2 = data.isa$rows2[, n] != 0
isaCol = data.isa$columns[, n] != 0
module.n1 <- t(data)[isaRow1, isaCol, drop=FALSE]
module.n2 <- t(data2)[isaRow2, isaCol, drop=FALSE]
return(list(data1 = colnames(module.n1), data2 = colnames(module.n2)))
}
}
isaColNames <- function(data, data2 = NULL, data.isa, type = "isa", n){
if(type == "isa"){
isaRow = data.isa$rows[, n] != 0
isaCol = data.isa$columns[, n] != 0
module.n <- as.matrix(data[isaRow, isaCol, drop=FALSE])
return(colnames(module.n))
}
if(type == "ppa"){
isaRow1 = data.isa$rows1[, n] != 0
isaRow2 = data.isa$rows2[, n] != 0
isaCol = data.isa$columns[, n] != 0
module.n1 <- t(data)[isaRow1, isaCol, drop=FALSE]
module.n2 <- t(data2)[isaRow2, isaCol, drop=FALSE]
return(list(data1 = rownames(module.n1), data2 = rownames(module.n2)))
}
}
isaScore <- function(data, data.isa, Row = FALSE, Col = FALSE, n){
isaRow = data.isa$rows[, n] != 0
isaNames <- rownames(data)[isaRow]
scoreRow <- data.frame(RowScore = data.isa$row[isaRow, n], row.names = isaNames)
isaCol = data.isa$columns[, n] != 0
isaNames <- colnames(data)[isaCol]
scoreCol <- data.frame(ColScore = data.isa$column[isaCol, n], row.names = isaNames)
return(list(scoreRow, scoreCol))
}
# Module visualization ----------------------------------------------------
isa2image <- function(data, data2 = NULL, data.isa, type = "isa", n, name1 = NULL, name2 = NULL, cex = 0.6, color1 = "red", color2 = "yellow", all = FALSE){
if(type == "isa"){
colors <- colorRampPalette(c(color1, color2))(n = 10000)
isaRow = data.isa$rows[, n] != 0
isaCol = data.isa$columns[, n] != 0
module.n <- t(as.matrix(data[isaRow, isaCol, drop=FALSE]))
ColorUsed <- colors[round(1+(min(module.n)-min(data))*10000/(max(data)-min(data))) : round( (max(module.n)-min(data))*10000/(max(data)-min(data)) )]
image(module.n, axes = F, main = paste("Module",  n), col=ColorUsed)
mtext(text=colnames(module.n), side=2, line=0.3, at=seq(0,1,l=ncol(module.n)), las=2, cex = cex)
mtext(text=rownames(module.n), side=1, line=0.3, at=seq(0,1,l=nrow(module.n)), las=2, cex = cex)
# if(all == TRUE){
#   allCol <- c(colnames(module.n), rownames(data)[!rownames(data) %in% colnames(module.n)])
#   allRow <- c(rownames(module.n), colnames(data)[!colnames(data) %in% rownames(module.n)])
#   image(as.matrix(t(data[allCol, allRow])), axes = F)
# }
}
if(type == "ppa"){
isaRow1 = data.isa$rows1[, n] != 0
isaRow2 = data.isa$rows2[, n] != 0
isaCol = data.isa$columns[, n] != 0
module.n1 <- t(data)[isaRow1, isaCol, drop=FALSE]
module.n2 <- t(data2)[isaRow2, isaCol, drop=FALSE]
par(mfrow = c(1,2))
image(module.n1, axes = F, main = paste("Module",  n, name1))
mtext(text=colnames(module.n1), side=2, line=0.3, at=seq(0,1,l=ncol(module.n1)), las=2, cex = cex)
mtext(text=rownames(module.n1), side=1, line=0.3, at=seq(0,1,l=nrow(module.n1)), las=2, cex = cex)
image(module.n2, axes = F, main = paste("Module",  n, name2))
mtext(text=colnames(module.n2), side=2, line=0.3, at=seq(0,1,l=ncol(module.n2)), las=2, cex = cex)
mtext(text=rownames(module.n2), side=1, line=0.3, at=seq(0,1,l=nrow(module.n2)), las=2, cex = cex)
par(mfrow = c(1,1))
}
if(all == TRUE){
isaRow <- c(rownames(data)[data.isa$rows[, n] != 0], rownames(data)[data.isa$rows[, n] == 0])
isaCol <- c(colnames(data)[data.isa$columns[, n] != 0], colnames(data)[data.isa$columns[, n] == 0])
module.n   <- t(as.matrix(data[isaRow, isaCol, drop=FALSE]))
image(module.n, axes = F, main = paste("Module",  n))
mtext(text=colnames(module.n), side=2, line=0.3, at=seq(0,1,l=ncol(module.n)), las=2, cex = cex)
mtext(text=rownames(module.n), side=1, line=0.3, at=seq(0,1,l=nrow(module.n)), las=2, cex = cex)
}
}
# Identity function -------------------------------------------------------
## Identity function
identity <- function(data1, data2, data.isa1, data.isa2, modules1, modules2, sel = 0, Col = FALSE){
id.matr <- matrix(NA, nrow = nrow(modules1), ncol = nrow(modules2))
if(Col == TRUE){
for(i in 1:nrow(modules1)){
id1 <- isaColNames(data = data1, type = "isa", data.isa = data.isa1, n = i)
for(j in 1:nrow(modules2)){
id2 <- isaColNames(data = data2, type = "isa", data.isa = data.isa2, n = j)
perc <- round(ifelse(length(id1) > length(id2), sum(id1 %in% id2)/length(id1), sum(id2 %in% id1)/length(id2)), 2)
id.matr[i,j] <- perc
}
}
} else {
for(i in 1:nrow(modules1)){
id1 <- isaRowNames(data = data1, type = "isa", data.isa = data.isa1, n = i)
for(j in 1:nrow(modules2)){
id2 <- isaRowNames(data = data2, type = "isa", data.isa = data.isa2, n = j)
perc <- round(ifelse(length(id1) > length(id2), sum(id1 %in% id2)/length(id1), sum(id2 %in% id1)/length(id2)), 2)
id.matr[i,j] <- perc
}
}
}
rownames(id.matr) <- paste0("mod", seq(1,nrow(modules1)))
colnames(id.matr) <- paste0("mod", seq(1,nrow(modules2)))
identity.sel <- id.matr[apply(id.matr, MARGIN = 1, function(x) any(x %in% seq(sel, 0.99, by = 0.001))), ]
identity.sel <- identity.sel[,apply(identity.sel, MARGIN = 2, function(x) any(x %in% seq(sel, 0.99, by = 0.001)))]
return(identity.sel)
}
urine.modules.uni
isaModules(data.isa = urine.uni, type = "isa")
es.modules <- isaModules(data.isa = urine.uni, type = "isa")
plot(es.modules$rob, urine.modules.uni$freq)
plot(es.modules$rob, urine.modules.uni$freq)
install.packages("swirl")
library(swirl)
version
mean(c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23.))
mean(c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23))
for(i in 1:25){}
for(i in 1:25){a <- a + i^2}
a = NULL
for(i in 1:25){a <- a + i^2}
a
a = NULL
a
a = 0
for(i in 1:25){a <- a + i^2}
a
class(cars)
nrow(cars)
names(cars)
colnames(cars)
mean(cars[,2])
which(cars$dist == 85)
traceback()
which(cars$dist == 85)
traceback()
serum.modules.uni <- isaModules(serum.uni, type = "isa")
urine.modules.uni <- isaModules(urine.uni, type = "isa")
urine.modules.uni[order(urine.modules.uni$rob, decreasing = T),]
update.packages()
install.packages("readRDS")
remove.packages(readRDS())
remove.packages(readRDS
)
source("https://bioconductor.org/biocLite.R")
biocLite("readRDS")
serum.uni <- isa.unique(serum.norm, serum.isa, method = c("cor"),
ignore.div = TRUE, cor.limit = 0.7, neg.cor = TRUE, drop.zero = TRUE)
urine.uni <- isa.unique(urine.norm, urine.isa, method = c("cor"), ignore.div = TRUE,
cor.limit = 0.7, neg.cor = TRUE, drop.zero = TRUE)
serum.modules.uni <- isaModules(serum.uni, type = "isa")
urine.modules.uni <- isaModules(urine.uni, type = "isa")
urine.modules.uni[order(urine.modules.uni$rob, decreasing = T),]
urine.modules.uni$rowGroups > 30
urine.modules.uni$rob > 30
urine.modules.uni[urine.modules.uni$rob > 30,]
urine.mod.sel <- urine.modules.uni[urine.modules.uni$rob > 30,]
dim(urine.mod.sel)
urine.modules.uni[urine.modules.uni$rob > 40,]
urine.mod.sel <- urine.modules.uni[urine.modules.uni$rob > 40,]
urine.mod.sel
dim(urine.mod.sel)
serum.mod.sel <- serum.modules.uni[serum.modules.uni$rob > 40,]
serum.mod.sel
serum.mod.sel <- serum.modules.uni[serum.modules.uni$rob > 30,]
serum.mod.sel
dim(serum.mod.sel)
urine.mod.sel
for(j in 1:length(covariables)){
for (i in 1:ncol(urine.uni$rows)){
p <- summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
linear_regression_result[i,j] <- round(p,2)
}
}
p <- summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
linear_regression_result[i,j] <- round(p,2)
urine.uni$rows
ncol(urine.uni$rows)
linear_regression_result
i
j
linear_regression_result <- matrix(NA, ncol(urine.uni$rows), 6)
for(j in 1:length(covariables)){
for (i in 1:ncol(urine.uni$rows)){
p <- summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))$coefficients[,4] [2]
linear_regression_result[i,j] <- round(p,2)
}
}
colnames(linear_regression_result) <- covariables
rownames(linear_regression_result) <- paste0("Module", 1:ncol(urine.uni$rows))
rownames(urine.mod.sel)
linear_regression_result <- linear_regression_result[rownames(urine.mod.sel),]
linear_regression_result
heatmap.2(linear_regression_result, cellnote = linear_regression_result, notecex= 0.7, margins = c(7,7),
main = "Linear regression result", cexRow = 0.8, cexCol = 1.2, xlab = "", ylab = "",
notecol="black", density.info="none", trace="none", dendrogram = "none",
col = colorRampPalette(c("red", "green"))(n = 199), breaks = c(seq(0,0.05,length=100),             # for red
seq(0.3,1,length=100)), Colv="NA", Rowv = "NA",
keysize = 0.7, key.title = "p-value", key.xlab = NA)
i =4
j=1
summary(lm(phen[,covariables[j]] ~ urine.uni$rows[,i] + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))
isaColNames(urine, data.isa = urine.uni, type = "isa", n = 4)
ppm4 <- isaColNames(urine, data.isa = urine.uni, type = "isa", n = 4)
module4 <- urine[, ppm4]
module4
mod4isa <- isa(module4, row.thr = 0, col.thr = 0)
mod4isa <- isa(module4, thr.col = 0, thr.row = 0)
mod4isa
isaModules(mod4isa, type = "isa")
head(module4)
cor(module4[1,])
cor.test(module4[1,])
sd(module4[1,])
var(module4[1,])
sd
var
apply(module4, 1, sd)
min(apply(module4, 1, sd))
apply(module4, 1, sd)/min(apply(module4, 1, sd))
apply(module4, 1, var)/min(apply(module4, 1, var))
apply(module4, 1, sd)/min(apply(module4, 1, sd))
1/apply(module4, 1, sd)/min(apply(module4, 1, sd))
1/(apply(module4, 1, sd)/min(apply(module4, 1, sd)))
es4 <- 1/(apply(module4, 1, sd)/min(apply(module4, 1, sd)))
summary(lm(phen[,covariables[j]] ~ es4 + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))
mod4isa
isaModules(module4, type = "isa")
isaModules(module4, type = "isa", n= 4)
isaModules(module4, type = "isa")
isaModules(data.isa = module4, type = "isa")
isaModules(data.isa = module4, type = "isa")
isaModules(mod4isa, type = "isa")
cor(module4)
cor(t(module4))
es4 <- (apply(module4, 1, sd)/min(apply(module4, 1, sd)))
summary(lm(phen[,covariables[j]] ~ es4 + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))
es4 <- 1/(apply(module4, 1, var)/min(apply(module4, 1, var)))
summary(lm(phen[,covariables[j]] ~ es4 + SEX + AGE + BMI + PHYACT + SMK + ADTRN, data = phen))
library(isa2)
install.packages("ggplot2")
library(ggplot2)
version
