{
    "collab_server" : "",
    "contents" : "\\documentclass[a4paper,12pt]{article}\n\\title{Report: \\\\ Master Project Progress report}\n\\author{Mirjam}\n%\\date{}\n\n\n\\usepackage{graphicx}\n\\usepackage[margin=2.3cm]{geometry}\n\\usepackage{url}\n\\usepackage[onehalfspacing]{setspace}\n\\usepackage{caption}\n\\usepackage{subcaption}\n\\usepackage{amsmath}\n\\usepackage{longtable}\n\n\\begin{document}\n\\maketitle\n\n<<loadlibrary,echo=FALSE,include=FALSE>>=\nlibrary(ggplot2)\nlibrary(xtable)\nlibrary(knitr)\nlibrary(formatR)\nlibrary(isa2)\nlibrary(gplots)\n@\n\n<<isa.functions, echo=FALSE,include=FALSE>>=\n\n## useful isa functions\n# Modules informations -----------------------------------------------------\nisaModules <- function(data.isa, type = c(\"isa\", \"ppa\")) {\n  if(type == \"isa\"){\n    colGroups <- matrix(NA, ncol(data.isa$rows))\n    rowGroups <- matrix(NA, ncol(data.isa$rows))\n    for (i in 1:ncol(data.isa$rows)) {\n      colGroups[i] <- sum(data.isa$columns[,i] != 0)\n      rowGroups[i] <- sum(data.isa$rows[,i] != 0)\n    }\n    modules <- data.frame(colGroups, rowGroups, freq = data.isa$seeddata$freq,  thr.row = data.isa$seeddata$thr.row, thr.col = data.isa$seeddata$thr.col)\n    colnames(modules) <- c(\"colGroups\", \"rowGroups\", \"freq\", \"thr.row\", \"thr.col\")\n    rownames(modules) <- paste0(\"Module\", 1:nrow(modules))\n  }\n  if(type == \"ppa\"){\n    colGroups <- matrix(NA, ncol(data.isa$rows1))\n    row1Groups <- matrix(NA, ncol(data.isa$rows1))\n    row2Groups <- matrix(NA, ncol(data.isa$rows2))\n    for (i in 1:ncol(data.isa$rows1)) {\n      colGroups[i] <- sum(data.isa$columns[,i] != 0)\n      row1Groups[i] <- sum(data.isa$rows1[,i] != 0)\n      row2Groups[i] <- sum(data.isa$rows2[,i] != 0)\n    }\n    modules <- data.frame(colGroups, row1Groups, row2Groups)\n    colnames(modules) <- c(\"colGroups\", \"row1Groups\",\"row2Groups\")\n    rownames(modules) <- paste0(\"Module\", 1:nrow(modules))\n  }\n  print(modules)\n}\n# Extract module informations ----------------------------------------------------\nisaRowNames <- function(data, data2 = NULL, data.isa, type = \"isa\", n){\n  if(type == \"isa\"){\n    isaRow = data.isa$rows[, n] != 0\n    isaCol = data.isa$columns[, n] != 0\n    module.n <- t(as.matrix(data[isaRow, isaCol, drop=FALSE]))\n    return(colnames(module.n))\n  }\n  if(type == \"ppa\"){\n    isaRow1 = data.isa$rows1[, n] != 0\n    isaRow2 = data.isa$rows2[, n] != 0\n    isaCol = data.isa$columns[, n] != 0\n    module.n1 <- t(data)[isaRow1, isaCol, drop=FALSE]\n    module.n2 <- t(data2)[isaRow2, isaCol, drop=FALSE]\n    return(list(data1 = colnames(module.n1), data2 = colnames(module.n2)))\n  }\n}\nisaColNames <- function(data, data2 = NULL, data.isa, type = \"isa\", n){\n  if(type == \"isa\"){\n    isaRow = data.isa$rows[, n] != 0\n    isaCol = data.isa$columns[, n] != 0\n    module.n <- t(as.matrix(data[isaRow, isaCol, drop=FALSE]))\n    return(rownames(module.n))\n  }\n  if(type == \"ppa\"){\n    isaRow1 = data.isa$rows1[, n] != 0\n    isaRow2 = data.isa$rows2[, n] != 0\n    isaCol = data.isa$columns[, n] != 0\n    module.n1 <- t(data)[isaRow1, isaCol, drop=FALSE]\n    module.n2 <- t(data2)[isaRow2, isaCol, drop=FALSE]\n    return(list(data1 = rownames(module.n1), data2 = rownames(module.n2)))\n  }\n}\n\n# Module visualization ----------------------------------------------------\n\nisa2image <- function(data, data2 = NULL, data.isa, type = \"isa\", n, name1 = NULL, name2 = NULL, cex = 0.6, all = FALSE){\n  if(type == \"isa\"){\n    isaRow = data.isa$rows[, n] != 0\n    isaCol = data.isa$columns[, n] != 0\n    module.n <- t(as.matrix(data[isaRow, isaCol, drop=FALSE]))\n    image(module.n, axes = F, main = paste(\"Module\",  n))\n    mtext(text=colnames(module.n), side=2, line=0.3, at=seq(0,1,l=ncol(module.n)), las=2, cex = cex)\n    mtext(text=rownames(module.n), side=1, line=0.3, at=seq(0,1,l=nrow(module.n)), las=2, cex = cex)\n    # if(all == TRUE){\n    #   allCol <- c(colnames(module.n), rownames(data)[!rownames(data) %in% colnames(module.n)])\n    #   allRow <- c(rownames(module.n), colnames(data)[!colnames(data) %in% rownames(module.n)])\n    #   image(as.matrix(t(data[allCol, allRow])), axes = F)\n    # }\n  }\n  if(type == \"ppa\"){\n    isaRow1 = data.isa$rows1[, n] != 0\n    isaRow2 = data.isa$rows2[, n] != 0\n    isaCol = data.isa$columns[, n] != 0\n    module.n1 <- t(data)[isaRow1, isaCol, drop=FALSE]\n    module.n2 <- t(data2)[isaRow2, isaCol, drop=FALSE]\n    par(mfrow = c(1,2))\n    image(module.n1, axes = F, main = paste(\"Module\",  n, name1))\n    mtext(text=colnames(module.n1), side=2, line=0.3, at=seq(0,1,l=ncol(module.n1)), las=2, cex = cex)\n    mtext(text=rownames(module.n1), side=1, line=0.3, at=seq(0,1,l=nrow(module.n1)), las=2, cex = cex)\n    image(module.n2, axes = F, main = paste(\"Module\",  n, name2))\n    mtext(text=colnames(module.n2), side=2, line=0.3, at=seq(0,1,l=ncol(module.n2)), las=2, cex = cex)\n    mtext(text=rownames(module.n2), side=1, line=0.3, at=seq(0,1,l=nrow(module.n2)), las=2, cex = cex)\n    par(mfrow = c(1,1))\n  }\n  if(all == TRUE){\n    isaRow <- c(rownames(data)[data.isa$rows[, n] != 0], rownames(data)[data.isa$rows[, n] == 0])\n    isaCol <- c(colnames(data)[data.isa$columns[, n] != 0], colnames(data)[data.isa$columns[, n] == 0])\n    module.n   <- t(as.matrix(data[isaRow, isaCol, drop=FALSE]))\n    image(module.n, axes = F, main = paste(\"Module\",  n))\n    mtext(text=colnames(module.n), side=2, line=0.3, at=seq(0,1,l=ncol(module.n)), las=2, cex = cex)\n    mtext(text=rownames(module.n), side=1, line=0.3, at=seq(0,1,l=nrow(module.n)), las=2, cex = cex)\n  }\n}\n@\n\n<<loadData,echo=FALSE,include=FALSE>>=\n############## ISA data\nload(\"C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/data/ser_ur_modules20170727.RData\")\n\n## serum data\nserum <- read.csv(\"C://Mimi/Stage_CBG/2.EXPRESSION_MODULE/Data/metabolomics/serum.nmr.focus.all.colaus1.20160830.csv\", h = F)\nppm <- paste(\"ppm\", serum[1,2:ncol(serum)], sep =\"_\")\ntp  <- paste(\"id\", serum[2:nrow(serum),1], sep = \"_\")\nserum <- serum[2:nrow(serum), 2:ncol(serum)]\ncolnames(serum) <- ppm\nrownames(serum) <- tp\n\n## urine data\nurine <- read.csv(\"C://Mimi/Stage_CBG/2.EXPRESSION_MODULE/Data/metabolomics/urine.nmr.focus.all.colaus1.20161205.csv\", h = F)\nppm <- paste(\"ppm\", urine[1,2:ncol(urine)], sep =\"_\")\ntp  <- paste(\"id\", urine[2:nrow(urine),1], sep = \"_\")\nurine <- urine[2:nrow(urine), 2:ncol(urine)]\ncolnames(urine) <- ppm\nrownames(urine) <- tp\n\nrm(\"ppm\", \"tp\")\n## select matching id (790 individuals having serum and urine metabolomics)\nserum <- serum[rownames(serum) %in% rownames(urine),]\nserum <- serum[order(rownames(serum)),]\nurine <- urine[rownames(urine) %in% rownames(serum),]\nurine <- urine[order(rownames(urine)),]\n\n## Data Normalization (z-score normalization)\n# serum\nserum[serum<1]=1 # to avoid negative numbers\nserum <- log10(serum)# log-transformed data\n# serum <- serum-(rep(rowMeans(serum), each = ncol(serum))/rep(apply(serum, 1, sd, na.rm = TRUE), each = ncol(serum))) #Normalize subjects\n# serum <- serum-(rep(colMeans(serum), each = ncol(serum))/rep(apply(serum, 2, sd, na.rm = TRUE), each = ncol(serum))) #Normalize variables\nserum <- t(scale(t(serum)))\nserum <- scale(serum)\n# apply(serum, 2, sd)\n\n#urine\nurine[urine<1]=1 # to avoid negative numbers\nurine <- log10(urine)# log-transformed data\n# urine <- urine-(rep(rowMeans(urine), each = ncol(urine))/rep(apply(urine, 1, sd, na.rm = TRUE), each = ncol(urine))) #Normalize subjects\n# urine <- urine-(rep(colMeans(urine), each = ncol(urine))/rep(apply(urine, 2, sd, na.rm = TRUE), each = ncol(urine))) #Normalize variables\nurine <- t(scale(t(urine)))\nurine <- scale(urine)\n\n## module info\nserum.modules <- isaModules(serum.isa, type = \"isa\")\nurine.modules <- isaModules(urine.isa, type = \"isa\")\n\n############## Phenotype data\npheno_raw <- read.csv(\"C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/data/traits.raw.colaus1.20161116.csv\", h = F, sep = \",\", stringsAsFactors = T)\npheno_transf <- read.csv(\"C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/data/traits.transformed.colaus1.20161116.csv\", h = F, sep = \",\")\npheno_names <- read.csv(\"C://Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/data/trait_names.raw.colaus1.20161116.csv\", h = F, sep = \",\")\npheno <- pheno_raw\ncolnames(pheno) <- c(\"ID\", as.character(pheno_names$V1))\n@\n\n%-------------------------------------------\n\\section{Objective}\n%--------------------------------------------\n\n\\begin{itemize}\n\\item Summarize the information present in the phenotype data, like age-gender distribution, correlation between variables, variables class and distribution, ..?\n\\item  Looking to the relationship between phenotype and modules: build an automatic pipeline to compare individuals present in each module to the rest of the population. For example look if all the individuals present in a module are woman or if they are older compared to the average age.\n\nQuestion: is it possible to do a t-test, even in the case were we will have only a small number of individuals in some modules? Does it make sens to compare the individuals to the rest of the population? Is it better to use a non-parametric test? (like  Mannâ€“Whitney test?). Or is it better to use the mean value? (t.test with mu = x).\n\n%-------------------------------------------\n\\section{Hypothesis}\n%--------------------------------------------\n\nHypothesis:\n\\begin{itemize}\n\n \\item H0: No difference between the the different traits over the sex, age, physical activity or smoking status category.\n \\item H1: Age, sex, physical activity or smoking status are correlated with one of the following traits: Cholesterol, SBP, Triglicerides, HDL cholesterol, LDL cholesterol and ADTRN.\n\\end{itemize}\n Variables:\n\\begin{itemize}\n \\item Response variable (dependent variable): the different trait, \n \\item Explanatory variable: Age, sex, physical activity status and smoking status (qualitative variable).\n\\end{itemize}\n\n%-------------------------------------------\n\\section{Methods}\n%--------------------------------------------\n\nBuild a multiple linear regression model to each individual trait to investigate the relation with age, gender, smoking status or physical activity. \n\n\\begin{align}\nTrait \\sim Age + BMI + Physical activity + Smoking status\n\\end{align}\n\n%-------------------------------------------\n\\section{Data Information}\n%--------------------------------------------\nModule information:\n\n<<module.info,echo=FALSE,include=T,results='asis',warning=F>>=\nprint(xtable(serum.modules,\n             caption = \"Module information for serum. colGroups = part per million (ppm), rowGroups = Individuals, freq = number of time a module has been found, thr.row and thr.col = threshold used when running the isa algorithm\"), include.rownames = TRUE, include.colnames = TRUE,size = \"scriptsize\", tabular.environment = 'longtable', sanitize.text.function = function(x) x)\n\nprint(xtable(urine.modules,\n             caption = \"Module information for urine. colGroups = part per million (ppm), rowGroups = Individuals, freq = number of time a module has been found, thr.row and thr.col = threshold used when running the isa algorithm\"), include.rownames = TRUE, include.colnames = TRUE, size = \"scriptsize\",tabular.environment = 'longtable', sanitize.text.function = function(x) x)\n\n@\n\n%-------------------------------------------\n\\section{Results}\n%--------------------------------------------\n\n%------------------------------------\n\\subsection{Linear regression}\n%-------------------------------------\n<<summary2,echo=TRUE,include=TRUE,size=\"small\">>=\n## Cholesterol\nsummary(lm(CHOL ~ as.factor(SEX) + AGE + BMI + as.factor(PHYACT) + as.factor(SMK), data = pheno))\nsummary(lm(CHOL ~ SEX + AGE + BMI + PHYACT + SMK, data = pheno))\n## SBP?\nsummary(lm(SBP ~ SEX + AGE + BMI + PHYACT + SMK, data = pheno))\n## Triglycerides\nsummary(lm(TRIG ~ SEX + AGE + BMI + PHYACT, data = pheno))\n## HDL cholesterol\nsummary(lm(HDLCH ~ SEX + AGE + BMI + PHYACT, data = pheno))\n## LDL cholesterol\nsummary(lm(LDLCH ~ SEX + AGE + BMI + PHYACT, data = pheno))\n## ADTRN?\nsummary(lm(ADTRN ~ SEX + AGE + BMI + PHYACT, data = pheno))\n\n@\n%-------------------------------------------\n\\subsection{t test on different traits}\n%--------------------------------------------\n\n<<t.test, echo=F, include=T, results='asis',warning=FALSE>>=\nphen <- pheno\nphen$ID <- paste0(\"id_\", phen$ID)\nphen <- phen[phen$ID %in% rownames(urine),]\nphen <- phen[order(phen$ID),]\n\nt.test.variable <- function(phenotype.data, metabo.data, metabo.isa, variable1){\n  p_val = NULL\n  for(i in 1:nrow(metabo.isa$seeddata)){\n    id <- isaRowNames(data = metabo.data, data.isa = metabo.isa, type = \"isa\", n = i)\n    if(length(id)==1) {\n      p <- NA\n    } else {\n      if(length(na.omit(phenotype.data[colnames(phenotype.data) %in% variable1][phenotype.data$ID %in% id,])) == 1) {\n        p <- NA\n      } else {\n        p <- format(t.test(na.omit(phenotype.data[colnames(phenotype.data) %in% variable1][phenotype.data$ID %in% id,]), \n                         phenotype.data[colnames(phenotype.data) %in% variable1][!phenotype.data$ID %in% id,])$p.value, \n                  digits = 2)\n      }\n    }\n    p_val <- c(p_val, as.numeric(p))\n  }\nreturn(data.frame(modules = paste0(\"Module\", 1:nrow(metabo.isa$seeddata)), p_val))  \n}\n  \nage.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"AGE\")\nsex.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"SEX\")\nchol.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"CHOL\")\nGLUC.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"GLUC\")\nSBP.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"SBP\")\nBMI.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"BMI\")\nTRIG.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"TRIG\")\nHDLCH.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"HDLCH\")\nLDLCH.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"LDLCH\")\nSMK.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"SMK\")\nPHYACT.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"PHYACT\")\nADTRN.test <- t.test.variable(phenotype.data = phen, metabo.data = serum, metabo.isa = serum.isa, variable1 = \"ADTRN\")\n\np_val_result <- data.frame(AGE = age.test$p_val, SEX = sex.test$p_val, CHOL = chol.test$p_val, \n                      GLUC = GLUC.test$p_val, SBP = SBP.test$p_val, BMI = BMI.test$p_val, \n                      TRIG = TRIG.test$p_val, HDLCH = HDLCH.test$p_val, LDLCH = LDLCH.test$p_val, \n                      SMK = SMK.test$p_val, PHYACT = PHYACT.test$p_val, ADTRN = ADTRN.test$p_val)\nrownames(p_val_result) <- paste0(\"Mod\", 1:nrow(serum.modules))\np_val_result <- na.omit(p_val_result[apply(p_val_result, MARGIN = 1, function(x) any(x <= 0.05/nrow(serum.modules))), ])\n\nfor(i in 1:ncol(p_val_result)){\n  p_val_result[,i] <- p_val_result[,i] <- ifelse(p_val_result[,i] <= 0.05/nrow(serum.modules), paste0(\"\\\\color{red}{\", p_val_result[,i], \"}\"), p_val_result[,i])\n}\n\nprint(xtable(p_val_result,\n             caption = \"Module associated with different traits\"), include.rownames = TRUE, include.colnames = TRUE, size = \"tiny\", tabular.environment = 'longtable', sanitize.text.function = function(x) x)\n\n@\n\n\n\\end{document}",
    "created" : 1502258045527.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2737823022",
    "id" : "A837C358",
    "lastKnownWriteTime" : 1502888870,
    "last_content_update" : 1502888871085,
    "path" : "C:/Mimi/UNI/Master/MLS_BIOINFORMATICS/Master_Project_MLS/result/linear_regression/linear_regression_pheno.Rnw",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "sweave"
}